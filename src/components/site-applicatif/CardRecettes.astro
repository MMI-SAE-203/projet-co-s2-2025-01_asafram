---
import IconeFacile from "../../assets/icones/recette-facile.webp";
import IconeMoyen from "../../assets/icones/recette-moyen.webp";
import IconeDifficile from "../../assets/icones/recette-difficile.webp";
import IconeTemps from "../../assets/icones/icone-temps.webp";
import IconeFavoris from "../../assets/icones/icone-etoile.svg";
import IconeEtoileNote from "../../assets/icones/etoile-note.svg";

const { recette } = Astro.props;

// Vérification si le prix existe
const formattedPrice = recette?.prix ? `${recette.prix.toFixed(2)}€` : "";

// Gestion des étoiles pour la notation
const rating = recette?.note || 0;
const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 >= 0.5;
const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

// Déterminer l'icône de difficulté à afficher
const getDifficultyIcon = (difficulty: string | undefined) => {
  if (!difficulty) return IconeFacile.src;

  const difficultyLower = difficulty.toLowerCase();
  if (difficultyLower.includes("facile")) return IconeFacile.src;
  if (difficultyLower.includes("moyen")) return IconeMoyen.src;
  if (difficultyLower.includes("difficile")) return IconeDifficile.src;

  return IconeFacile.src;
};

// État initial du favori (à adapter selon votre logique d'application)
const isFavorite = false;

// Debugging
console.log("Données complètes de la recette:", recette);
console.log("Données expandées:", recette.expand);
console.log("Auteur expandé:", recette.expand?.auteur);
console.log("Auteur direct:", recette.auteur);

// Récupérer le username de l'auteur de la manière la plus adaptée à la structure des données
let auteurUsername = "andrea92i";

// 1. Si l'auteur expandé existe et a un username
if (recette.expand?.auteur?.username) {
  auteurUsername = recette.expand.auteur.username;
}
// 2. Si l'auteur direct est un objet avec un username
else if (typeof recette.auteur === "object" && recette.auteur?.username) {
  auteurUsername = recette.auteur.username;
}
// 3. Si on n'a que l'ID de l'auteur (soit dans recette.auteur soit dans recette.expand.auteur.id)
else {
  const auteurId =
    typeof recette.auteur === "string"
      ? recette.auteur
      : recette.expand?.auteur?.id || null;

  if (auteurId) {
    // On peut afficher "Utilisateur #ID" en attendant une requête pour récupérer le username
    auteurUsername = "andrea92i";
  }
}
---

<a
  href={`/recettes/${recette.id}`}
  class="card-recette w-[281px] h-[345px] relative border-2 border-sable rounded-[15px] bg-white flex flex-col transition-transform duration-300 hover:scale-[1.01] cursor-pointer"
  data-recette-id={recette.id}
>
  <!-- En-tête de la carte avec pays et bouton favori -->
  <div class="flex justify-between items-center p-4">
    {
      recette.expand?.pays && (
        <div class="flex items-center">
          {recette.expand.pays.drapeauUrl && (
            <div class="flag w-[26px] h-[19px] mr-[10px] border border-black overflow-hidden">
              <img
                src={recette.expand.pays.drapeauUrl}
                alt={recette.expand.pays.nom}
                class="w-full h-full object-cover"
              />
            </div>
          )}
          <span class="text-sm font-bold text-black uppercase">
            {recette.expand.pays.nom}
          </span>
        </div>
      )
    }

    <!-- Bouton Favoris -->
    <button
      class="favorite-btn w-[36px] h-[36px] bg-sable rounded-full flex justify-center items-center transition-all duration-300 hover:bg-sable z-20 cursor-pointer"
      aria-label={isFavorite ? "Retirer des favoris" : "Ajouter aux favoris"}
      data-recette-id={recette.id}
    >
      <img
        src={IconeFavoris.src}
        alt="Favoris"
        width={18}
        height={17}
        class={`${isFavorite ? "opacity-100" : "opacity-75"} transition-opacity`}
      />
    </button>
  </div>

  <!-- Temps de préparation -->
  <div
    class="absolute right-2 gap-0.5 top-14 flex items-center bg-transparent bg-opacity-90 px-2 py-1 z-10"
  >
    <img
      src={IconeTemps.src}
      alt="Temps de préparation"
      width={25}
      height={25}
      class="w-6 h-6"
    />
    <span class="text-sm !font-radio-canada uppercase"
      >{recette.temps || "30"}</span
    >
  </div>

  <!-- Image de la recette au centre dans un cercle -->
  <div class="flex-grow flex justify-center items-center px-4">
    <div class="relative w-[175px] h-[175px]">
      <div
        class="absolute top-0 left-0 w-full h-full flex items-center justify-center"
      >
        <div class="w-[155px] h-[155px] bg-sable opacity-75 rounded-full"></div>
      </div>

      <div
        class="absolute top-0 left-0 w-full h-full flex items-center justify-center"
      >
        <img
          src={recette.img}
          alt={recette.nom}
          class="w-[140px] h-[140px] object-cover rounded-full z-10"
        />
      </div>
    </div>
  </div>

  <!-- Informations de la recette -->
  <div class="px-4 pb-4">
    <!-- Nom de la recette -->
    <h3 class="!text-lg !p-0 !font-raleway uppercase text-black">
      {recette.nom}
    </h3>

    <!-- Auteur de la recette -->
    <p class="text-sm text-black">
      de <span class="underline">{auteurUsername}</span>
    </p>

    <div class="flex justify-between items-center">
      <!-- Notation avec étoiles -->
      <div class="flex items-center">
        <div class="flex gap-1">
          {
            Array(fullStars)
              .fill(0)
              .map(() => (
                <img
                  src={IconeEtoileNote.src}
                  alt="Étoile"
                  width={15}
                  height={15}
                  class="text-saumon"
                />
              ))
          }

          {
            hasHalfStar && (
              <img
                src={IconeEtoileNote.src}
                alt="Demi-étoile"
                width={15}
                height={15}
                class="opacity-50"
              />
            )
          }

          {
            Array(emptyStars)
              .fill(0)
              .map(() => (
                <img
                  src={IconeEtoileNote.src}
                  alt="Étoile vide"
                  width={15}
                  height={15}
                  class="grayscale opacity-50"
                />
              ))
          }
        </div>

        {
          recette.nbNotes && (
            <span class="text-xs text-black ml-2">(+{recette.nbNotes})</span>
          )
        }
      </div>

      <!-- Niveau de difficulté -->
      <div
        class="bg-sable rounded-md p-2 px-4 flex justify-center items-center"
      >
        <span class="text-xs font-bold mr-1 uppercase tracking-wider">
          {recette.difficulte || "Moyen"}
        </span>
        <img
          src={getDifficultyIcon(recette.difficulte)}
          alt={`Difficulté: ${recette.difficulte || "Moyen"}`}
          width={20}
          height={20}
          class="mr-1"
        />
      </div>
    </div>
  </div>
</a>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const favButtons = document.querySelectorAll(".favorite-btn");

    favButtons.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();

        const recetteId = btn.getAttribute("data-recette-id");
        const isFavorite = btn.classList.contains("is-favorite");

        try {
          // Toggle state
          btn.classList.toggle("is-favorite");
          const iconElement = btn.querySelector("img");

          if (iconElement) {
            if (isFavorite) {
              iconElement.classList.add("opacity-75");
              iconElement.classList.remove("opacity-100");
              btn.setAttribute("aria-label", "Ajouter aux favoris");

              console.log(`Retrait de la recette ${recetteId} des favoris`);
              // Ici, ajoutez votre logique pour retirer des favoris
            } else {
              iconElement.classList.add("opacity-100");
              iconElement.classList.remove("opacity-75");
              btn.setAttribute("aria-label", "Retirer des favoris");

              btn.classList.add("animate-heartbeat");
              setTimeout(() => {
                btn.classList.remove("animate-heartbeat");
              }, 1000);

              console.log(`Ajout de la recette ${recetteId} aux favoris`);
              // Ici, ajoutez votre logique pour ajouter aux favoris
            }
          }
        } catch (error) {
          console.error("Erreur lors de la mise à jour des favoris:", error);
          btn.classList.toggle("is-favorite");
        }
      });
    });
  });
</script>

<style>
  @keyframes heartbeat {
    0% {
      transform: scale(1);
    }
    25% {
      transform: scale(1.2);
    }
    50% {
      transform: scale(1);
    }
    75% {
      transform: scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }

  .animate-heartbeat {
    animation: heartbeat 0.5s ease-in-out;
  }

  .favorite-btn.is-favorite {
    background-color: #e69c50;
  }

  /* Style spécifique pour les cartes recettes */
  .card-recette:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
</style>
