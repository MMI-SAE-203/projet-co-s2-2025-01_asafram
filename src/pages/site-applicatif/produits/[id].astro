---
import LayoutApplicatif from "../../../layouts/LayoutApplicatif.astro";
import IconeFavoris from "../../../assets/icones/icone-etoile.svg";
import IconeEtoileNote from "../../../assets/icones/etoile-note.svg";
import IconeDistance from "../../../assets/icones/icone-coordonnes.svg";
import { getProductById } from "../../../../backend/backend.js";

// Récupération de l'ID du produit depuis l'URL
const { id } = Astro.params;

// Récupération du produit depuis la base de données
let dbProduct = await getProductById(id);

// Vérification si le produit existe
if (!dbProduct) {
  return Astro.redirect("/site-applicatif");
}

// Création d'un objet produit avec des valeurs statiques pour les éléments problématiques
const product = {
  // Propriétés du produit venant de la base de données
  id: dbProduct.id,
  nom: dbProduct.nom,
  prix: dbProduct.prix,
  img: dbProduct.img,
  expand: dbProduct.expand,
  description:
    dbProduct.description ||
    "Découvrez ce produit authentique au goût unique. Une délicieuse spécialité à savourer à tout moment !",
  note: dbProduct.note,
  nbNotes: dbProduct.nombres_notes,
  // Valeurs statiques
  distance: 5,
  disponible: dbProduct.disponibilite,
};

// Formater le prix avec le symbole €
const formattedPrice = product.prix ? `${product.prix.toFixed(2)}€` : "";

// Conversion de la note en tableau d'étoiles
const rating = product.note || 0;
const fullStars = Math.floor(rating);
const hasHalfStar = rating % 1 >= 0.5;
const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

// État du favori (à implémenter ultérieurement avec une vraie logique)
const isFavorite = false;
---

<LayoutApplicatif title={product.nom} description={product.description}>
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Fil d'Ariane -->
    <div class="text-sm text-gray-500 mb-6">
      <a href="/site-applicatif" class="hover:text-saumon">Accueil</a> &gt;
      <a href="/site-applicatif/produits" class="hover:text-saumon">Produits</a>
      &gt;
      <span class="text-black">{product.nom}</span>
    </div>

    <div class="flex flex-col md:flex-row gap-40">
      <!-- Partie gauche: image du produit -->
      <div class="md:w-1/2">
        <div class="relative">
          <!-- Cercle de fond saumon -->
          <div class="absolute inset-0 flex items-center justify-center">
            <div
              class="w-[300px] h-[300px] md:w-[400px] md:h-[400px] bg-saumon opacity-75 rounded-full"
            >
            </div>
          </div>

          <!-- Image du produit -->
          <div class="relative flex justify-center items-center py-4">
            {
              product.img && (
                <img
                  src={product.img}
                  alt={product.nom}
                  class="w-auto h-auto max-w-[250px] max-h-[350px] md:max-w-[350px] md:max-h-[450px] object-contain z-10"
                />
              )
            }
          </div>
        </div>
      </div>

      <!-- Partie droite: informations du produit -->
      <div class="md:w-1/2">
        <!-- En-tête avec pays et bouton favoris -->
        <div class="flex justify-between items-center mb-4">
          {
            product.expand?.pays && (
              <div class="flex items-center">
                <div class="w-[30px] h-[22px] mr-3 border border-gray-400 overflow-hidden rounded-sm">
                  {product.expand.pays.drapeauUrl && (
                    <img
                      src={product.expand.pays.drapeauUrl}
                      alt={product.expand.pays.nom}
                      class="w-full h-full object-cover"
                    />
                  )}
                </div>
                <span class="text-lg font-bold uppercase">
                  {product.expand.pays.nom}
                </span>
              </div>
            )
          }

          <!-- Bouton favoris -->
          <button
            class="favorite-btn w-[46px] h-[46px] bg-[#f8f0d7] rounded-full flex justify-center items-center transition-all duration-300 hover:bg-saumon"
            aria-label={isFavorite
              ? "Retirer des favoris"
              : "Ajouter aux favoris"}
            data-product-id={product.id}
          >
            <img
              src={IconeFavoris.src}
              alt="Favoris"
              width={22}
              height={22}
              class={`${isFavorite ? "opacity-100" : "opacity-75"} transition-opacity`}
            />
          </button>
        </div>

        <!-- Titre du produit -->
        <h1 class="!text-5xl font-bold mt-0 pt-4">{product.nom}</h1>

        <!-- Section combinée: Évaluation avec étoiles et indicateur de disponibilité -->
        <div class="flex items-center justify-between mb-6">
          <!-- Évaluation avec étoiles -->
          <div class="flex items-center gap-2">
            <span class="text-xl font-bold">{product.note}</span>
            <div class="flex gap-1">
              {
                Array(fullStars)
                  .fill(0)
                  .map(() => (
                    <img
                      src={IconeEtoileNote.src}
                      alt="Étoile"
                      width={20}
                      height={20}
                    />
                  ))
              }

              {
                hasHalfStar && (
                  <img
                    src={IconeEtoileNote.src}
                    alt="Demi-étoile"
                    width={20}
                    height={20}
                    class="opacity-50"
                  />
                )
              }

              {
                Array(emptyStars)
                  .fill(0)
                  .map(() => (
                    <img
                      src={IconeEtoileNote.src}
                      alt="Étoile vide"
                      width={20}
                      height={20}
                      class="grayscale opacity-50"
                    />
                  ))
              }
            </div>
            {
              product.nbNotes && (
                <span class="text-sm text-gray-600">(+{product.nbNotes})</span>
              )
            }
          </div>

          <!-- Indicateur de disponibilité -->
          <div class="flex items-center gap-3">
            <div
              class={`w-3 h-3 rounded-full ${product.disponible ? "bg-green-500" : "bg-red-500"}`}
            >
            </div>
            <span class="font-bold"
              >{product.disponible ? "DISPONIBLE" : "INDISPONIBLE"}</span
            >
            {
              product.disponible && (
                <div class="w-3 h-3 rounded-full bg-green-500 ml-3" />
              )
            }
          </div>
        </div>

        <!-- Sélecteur de quantité et prix -->
        <div class="flex items-center justify-between mb-8">
          <div class="flex border border-gray-300 rounded-md">
            <button
              class="px-4 py-2 text-xl border-r border-gray-300 hover:bg-gray-100 transition-colors quantity-decrement"
              >−</button
            >
            <input
              type="text"
              value="1"
              class="w-12 text-center py-2 quantity-input"
            />
            <button
              class="px-4 py-2 text-xl border-l border-gray-300 hover:bg-gray-100 transition-colors quantity-increment"
              >+</button
            >
          </div>
          <div class="text-3xl font-bold">{formattedPrice}</div>
        </div>

        <!-- Choix du magasin -->
        <div class="mb-8">
          <p class="text-sm text-gray-500 mb-2">
            Choisissez un magasin partenaire:
          </p>
          <div class="flex">
            <select
              class="border border-gray-300 rounded-l-md py-2 px-4 w-full"
            >
              <option>CARREFOUR</option>
              <option>FRANPRIX</option>
              <option>MONOPRIX</option>
            </select>
          </div>
        </div>

        <!-- Bouton d'achat -->
        <button
          class="w-full bg-saumon text-black font-bold py-4 rounded-lg hover:bg-[#e69c50] transition-colors flex items-center justify-center gap-3"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
            ></path>
          </svg>
          ACHETER LE PRODUIT
        </button>
      </div>
    </div>

    <!-- Description du produit -->
    <div class="mt-12 border-t border-gray-200 pt-8">
      <h2 class="text-2xl font-bold mb-4">DÉCOUVREZ {product.nom}</h2>
      <div class="prose max-w-none">
        <p class="text-lg">{product.description}</p>

        <p class="mt-6">
          Parfait pour se rafraîchir, ce produit unique associe le goût délicat
          des ingrédients authentiques à une texture surprenante.
        </p>

        <p class="mt-4">
          Sans ingrédients d'origine animale, rafraîchissant et original, c'est
          la pause parfaite pour s'évader le temps d'un instant gourmand !
        </p>
      </div>
    </div>

    <!-- Suggestions de produits similaires -->
    <div class="mt-16">
      <h2 class="text-2xl font-bold mb-6">VOUS AIMEREZ AUSSI</h2>
      <div
        class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
      >
        <!-- Produits similaires à implémenter ultérieurement -->
      </div>
    </div>
  </div>
</LayoutApplicatif>

<script>
  // Script pour gérer les interactions avec la quantité et les favoris
  document.addEventListener("DOMContentLoaded", () => {
    // Récupération du prix unitaire depuis l'élément HTML
    const priceElement = document.querySelector(".text-3xl.font-bold");
    const unitPrice =
      parseFloat(priceElement?.textContent?.replace("€", "").trim() || "0") ||
      0;

    // Formater le prix avec le symbole €
    const formatPrice = (price: number): string => `${price.toFixed(2)}€`;

    // Fonction pour mettre à jour le prix en fonction de la quantité
    const updatePrice = (quantity: number): void => {
      if (priceElement && !isNaN(unitPrice)) {
        const totalPrice = unitPrice * quantity;
        priceElement.textContent = formatPrice(totalPrice);
      }
    };

    // Gestion des boutons + et - pour la quantité
    const decrementBtn = document.querySelector(".quantity-decrement");
    const incrementBtn = document.querySelector(".quantity-increment");
    const quantityInput = document.querySelector(".quantity-input");

    if (decrementBtn && incrementBtn && quantityInput) {
      decrementBtn.addEventListener("click", () => {
        let value = parseInt((quantityInput as HTMLInputElement).value);
        if (value > 1) {
          (quantityInput as HTMLInputElement).value = String(value - 1);
          updatePrice(value - 1);
        }
      });

      incrementBtn.addEventListener("click", () => {
        let value = parseInt((quantityInput as HTMLInputElement).value);
        (quantityInput as HTMLInputElement).value = String(value + 1);
        updatePrice(value + 1);
      });

      // Vérifier que l'entrée est un nombre et mettre à jour le prix
      quantityInput.addEventListener("change", () => {
        let value = parseInt((quantityInput as HTMLInputElement).value);
        if (isNaN(value) || value < 1) {
          value = 1;
          (quantityInput as HTMLInputElement).value = "1";
        }
        updatePrice(value);
      });
    }

    // Gestion du bouton favoris
    const favBtn = document.querySelector(".favorite-btn");
    if (favBtn) {
      favBtn.addEventListener("click", () => {
        const iconElement = favBtn.querySelector("img");
        const isFavorite = favBtn.classList.contains("is-favorite");

        favBtn.classList.toggle("is-favorite");

        if (iconElement) {
          if (!isFavorite) {
            iconElement.classList.remove("opacity-75");
            iconElement.classList.add("opacity-100");
            favBtn.setAttribute("aria-label", "Retirer des favoris");
            favBtn.classList.add("animate-heartbeat");
            setTimeout(() => {
              favBtn.classList.remove("animate-heartbeat");
            }, 1000);
          } else {
            iconElement.classList.remove("opacity-100");
            iconElement.classList.add("opacity-75");
            favBtn.setAttribute("aria-label", "Ajouter aux favoris");
          }
        }
      });
    }
  });
</script>

<style>
  /* Animation heartbeat pour le favori */
  @keyframes heartbeat {
    0% {
      transform: scale(1);
    }
    25% {
      transform: scale(1.2);
    }
    50% {
      transform: scale(1);
    }
    75% {
      transform: scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }

  .animate-heartbeat {
    animation: heartbeat 0.5s ease-in-out;
  }

  /* État actif du bouton favori */
  .favorite-btn.is-favorite {
    background-color: #e69c50;
  }

  /* Style du focus pour l'accessibilité */
  button:focus,
  input:focus,
  select:focus {
    outline: 2px solid #e69c50;
    outline-offset: 2px;
  }
</style>
